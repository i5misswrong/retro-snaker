"wuziqi core" import time from random import randint from threading import Thread from time import sleep  __author__ = "caoliang"  class Core():     def __init__(self):          #棋盘：0为空位，1为玩家落子，2为电脑落子         self.table   = [([0] * 15) for i in range(15)]          self.busy        = 0         self.who_win     = 0            #上一步行棋的位置         self.last        = [-1,-1]          #上一步行棋在4个方向上的其他棋子数         self.last_pcs_dirction   = [0,0,0,0]         self.five_pcs = [([0] * 2) for i in range(5)]              def player_take(self,pos = (0,0)):          if self.table[pos[0]][pos[1]] == 0:             self.table[pos[0]][pos[1]] = 1             self.last = pos             self.test_player()                          if self.busy == 0 and self.who_win == 0:                 self.busy = 1                 task = Thread(target=self.computer_take,args=(0,))                 task.start()      def computer_take(self,tmp):         while True:             x = randint(0,14)             y = randint(0,14)             if self.table[x][y]==0:                 self.table[x][y] = 2                 self.last=[x,y]                 break         self.test_computer()         self.busy = 0      def cal_sum_arround(self,table=[],pos = (0,0),key = 1):          x,y = pos         five_p = [0,0,0,0, 0,0,0,0]          #判断 8个方向上的棋子数          for i in range(1,5):             if (x-i)> -1 and table[x-i][y] == key:                 five_p[0] = five_p[0] + 1             else:                 break          for i in range(1,5):             if (x-i)>-1 and (y-i)>-1 and table[x-i][y-i] == key:                 five_p[1] = five_p[1] + 1             else:                 break          for i in range(1,5):             if (y-i)>-1 and table[x][y-i] == key:                 five_p[2] = five_p[2] + 1             else:                 break          for i in range(1,5):             if (x+i)<15 and (y-i)>-1 and table[x+i][y-i] == key:                 five_p[3] = five_p[3] + 1             else:                 break          for i in range(1,5):             if (x+i)<15 and table[x+i][y] == key:                 five_p[4] = five_p[4] + 1             else:                 break          for i in range(1,5):             if (x+i)<15 and (y+i)<15 and table[x+i][y+i] == key:                 five_p[5] = five_p[5] + 1             else:                 break          for i in range(1,5):             if (y+i)<15 and table[x][y+i] == key:                 five_p[6] = five_p[6] + 1             else:                 break         for i in range(1,5):             if (x-i)>-1 and (y+i)<15 and table[x-i][y+i] == key:                 five_p[7] = five_p[7] + 1             else:                 break         #--------------------------------------#         dir=[0,0,0,0]         for i in range(4):             dir[i] = five_p[i] + five_p[i+4]         return dir      def cal_value(self,table=[],pos = (0,0),key = 1):          x,y = pos         five_p = [0,0,0,0, 0,0,0,0]          #判断 8个方向上的棋子数          for i in range(1,14):             if table[x-i][y] == key and (x-i) >= 0:                 five_p[0] = five_p[0] + 1             else:                 break          for i in range(1,14):             if table[x-i][y-i] == key and (x-i) >= 0 and y-i >= 0:                 five_p[1] = five_p[1] + 1             else:                 break          for i in range(1,14):             if table[x][y-i] == key and (y-i) >= 0:                 five_p[2] = five_p[2] + 1             else:                 break          for i in range(1,14):             if table[x+i][y-i] == key and (x+i)<15 and (y-i) >=0:                 five_p[3] = five_p[3] + 1             else:                 break          for i in range(1,14):             if table[x+i][y] == key and (x+i)<15:                 five_p[4] = five_p[4] + 1             else:                 break          for i in range(1,14):             if table[x+i][y+i] == key and (x+i)<15 and (y+i)<15:                 five_p[5] = five_p[5] + 1             else:                 break          for i in range(1,14):             if table[x][y+i] == key and (y+i)<15:                 five_p[6] = five_p[6] + 1             else:                 break         for i in range(1,14):             if table[x-i][y+i] == key and (x-i)>=0 and (y+i)<15:                 five_p[7] = five_p[7] + 1             else:                 break         #--------------------------------------#         dir=[0,0,0,0]         for i in range(4):             dir[i] = five_p[i] + five_p[i+4]         return dir      def test_player(self):         self.last_pcs_dirction = self.cal_sum_arround(self.table,self.last)         for i in range(4):             if self.last_pcs_dirction[i] >=4:                 self.who_win = 1                  break      def test_computer(self):         self.last_pcs_dirction = self.cal_sum_arround(self.table,self.last,2)         print(self.last_pcs_dirction)         for i in range(4):             if self.last_pcs_dirction[i] >=4:                 self.who_win = 2                  break   def test():     print("core is running !")  if __name__=='__main__':     test()
